---
# ------------------------------------------------------------------------------
# ZFS Mount Generator
# ------------------------------------------------------------------------------

- when:
    - zfs_use_zfs_mount_generator | bool
    - not (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic')
  block:  # noqa: name[missing]
    - name: enable the ZED script
      ansible.builtin.file:
        src: "{{ __zfs_zedletdir }}/history_event-zfs-list-cacher.sh"
        dest: /etc/zfs/zed.d/history_event-zfs-list-cacher.sh
        state: link
      register: history_event_zedlet

    - name: inform ZED about script change
      ansible.builtin.systemd:
        name: zfs-zed
        state: restarted
      when:
        - zfs_service_zed_enabled
        - history_event_zedlet.changed

    - name: ensure mount generator cache directory exists
      ansible.builtin.file:
        path: /etc/zfs/zfs-list.cache
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: create generator cache content
      ansible.builtin.shell: |
        # see history_event-zfs-list-cacher.sh
        PROPS="name,mountpoint,canmount,atime,relatime,devices,exec\
        ,readonly,setuid,nbmand,encroot,keylocation\
        ,org.openzfs.systemd:requires,org.openzfs.systemd:requires-mounts-for\
        ,org.openzfs.systemd:before,org.openzfs.systemd:after\
        ,org.openzfs.systemd:wanted-by,org.openzfs.systemd:required-by\
        ,org.openzfs.systemd:nofail,org.openzfs.systemd:ignore"

        # include only datasets, that do not use legacy mounts
        zfs list -H -t filesystem -o $PROPS -r -s name {{ zfs_pool.name | quote }} | awk '{if ($2 != "legacy") {print} }'

      register: zfs_list_cache
      changed_when: false
      check_mode: false
      loop: "{{ zfs_pools }}"
      loop_control:
        loop_var: zfs_pool
        label: "{{ zfs_pool.name }}"

    - name: create generator cache files
      ansible.builtin.copy:
        content: "{{ cache_entry.stdout }}"
        dest: "/etc/zfs/zfs-list.cache/{{ cache_entry.zfs_pool.name }}"
        owner: root
        group: root
        mode: 0644
      loop: "{{ zfs_list_cache.results }}"
      loop_control:
        loop_var: cache_entry
        label: "{{ cache_entry.zfs_pool.name }}"

# fix for journald when using zfs-mount.service
- when: zfs_service_mount_enabled
  block:  # noqa: name[missing]
    - name: ensure '/etc/systemd/system/systemd-journald.service.d' directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/systemd-journald.service.d/
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: create dependency for journald
      ansible.builtin.template:
        src: etc/systemd/system/systemd-journald.service.d/after-zfs-mount.service.j2
        dest: /etc/systemd/system/systemd-journald.service.d/after-zfs-mount.service
        owner: root
        group: root
        mode: 0644
      register: journald_service


# ------------------------------------------------------------------------------
# ZFS Services
# ------------------------------------------------------------------------------

- name: manage ZFS services
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    enabled: "{{ item.enabled }}"
    state: "{{ item.enabled | ternary('started', 'stopped') }}"
  # exclude zfs-volume-wait on Ubuntu Bionic
  when: >-
    not (
      item.name == 'zfs-volume-wait' and
      (ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic')
    )
  loop:
    - name: zfs.target
      enabled: true
    - name: zfs-import.target
      enabled: true
    - name: zfs-import-cache
      enabled: "{{ zfs_service_import_cache_enabled | bool }}"
    - name: zfs-import-scan
      enabled: "{{ zfs_service_import_scan_enabled | bool }}"
    - name: zfs-mount
      enabled: "{{ zfs_service_mount_enabled | bool }}"
    - name: zfs-share
      enabled: "{{ zfs_service_share_enabled | bool }}"
    - name: zfs-volume-wait
      enabled: "{{ zfs_service_volume_wait_enabled | bool }}"
    - name: zfs-zed
      enabled: "{{ zfs_service_zed_enabled | bool }}"


# ------------------------------------------------------------------------------
# ZFS Scrub Service
# ------------------------------------------------------------------------------

- block:  # noqa: name[missing]
    - name: remove scrub cron job
      ansible.builtin.file:
        path: /etc/cron.d/zfsutils-linux
        state: absent

    - name: create scrub service
      ansible.builtin.template:
        src: etc/systemd/system/zpool-scrub@.service.j2
        dest: /etc/systemd/system/zpool-scrub@.service
        owner: root
        group: root
        mode: 0644
      register: scrub_service

    - name: create scrub timer
      ansible.builtin.template:
        src: etc/systemd/system/zpool-scrub@.timer.j2
        dest: /etc/systemd/system/zpool-scrub@.timer
        owner: root
        group: root
        mode: 0644
      register: scrub_timer

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
      when: scrub_service.changed or scrub_timer.changed or journald_service.changed

    - name: enable scrub timer
      ansible.builtin.systemd:
        name: "zpool-scrub@{{ item.name }}.timer"
        enabled: true
        state: started
      when: item.scrub | default(true) | bool
      loop: "{{ zfs_pools }}"
      loop_control:
        label: "{{ item.name }}"

    - name: gather service facts
      ansible.builtin.service_facts:

    - name: disable undefined scrub timer
      ansible.builtin.systemd:
        name: "zpool-scrub@{{ item }}.timer"
        enabled: false
        state: stopped
      loop: "{{
              ansible_facts.services.keys() |
              select('match', 'zpool-scrub@.+\\.service') |
              map('regex_replace', 'zpool-scrub@(.+)\\.service', '\\1') | list |
              difference(zfs_pools | selectattr2('scrub', '==', true, default=true) | map(attribute='name') | list)
            }}"


# ------------------------------------------------------------------------------
# ZFS Trim Service
# ------------------------------------------------------------------------------

- block:
    - name: remove trim cron job
      ansible.builtin.file:
        path: /etc/cron.d/zfsutils-linux
        state: absent

    - name: create trim service
      ansible.builtin.template:
        src: etc/systemd/system/zpool-trim@.service.j2
        dest: /etc/systemd/system/zpool-trim@.service
        owner: root
        group: root
        mode: 0644
      register: trim_service

    - name: create trim timer
      ansible.builtin.template:
        src: etc/systemd/system/zpool-trim@.timer.j2
        dest: /etc/systemd/system/zpool-trim@.timer
        owner: root
        group: root
        mode: 0644
      register: trim_timer

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
      when: trim_service.changed or trim_timer.changed or journald_service.changed

    - name: enable trim timer
      ansible.builtin.systemd:
        name: "zpool-trim@{{ item.name }}.timer"
        enabled: true
        state: started
      when: item.trim | default(false) | bool
      loop: "{{ zfs_pools }}"
      loop_control:
        label: "{{ item.name }}"

    - name: gather service facts
      ansible.builtin.service_facts:

    - name: disable undefined trim timer
      ansible.builtin.systemd:
        name: "zpool-trim@{{ item }}.timer"
        enabled: false
        state: stopped
      loop: "{{
              ansible_facts.services.keys() |
              select('match', 'zpool-trim@.+\\.service') |
              map('regex_replace', 'zpool-trim@(.+)\\.service', '\\1') | list |
              difference(zfs_pools | selectattr2('trim', '==', true, default=true) | map(attribute='name') | list)
            }}"


# ------------------------------------------------------------------------------
# ZREPL Service
# ------------------------------------------------------------------------------

- name: manage zrepl service
  ansible.builtin.systemd:
    name: zrepl
    enabled: "{{ zfs_zrepl_enabled | bool }}"
    state: "{{ zfs_zrepl_enabled | bool | ternary('started', 'stopped') }}"
  when: ('zrepl.service' in ansible_facts.services)
